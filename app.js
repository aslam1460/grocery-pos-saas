"class GroceryPOS {\n    constructor() {\n        this.cart = [];\n        this.products = [];\n        this.receipts = [];\n        this.currentPaymentMethod = 'Cash';\n        this.init();\n        this.loadSampleData();\n    }\n\n    init() {\n        this.bindEvents();\n        this.loadProducts();\n        this.loadReceipts();\n    }\n\n    bindEvents() {\n        // Tab switching\n        document.querySelectorAll('.tab-btn').forEach(btn => {\n            btn.addEventListener('click', () => this.switchTab(btn.dataset.tab));\n        });\n\n        // Barcode input\n        document.getElementById('barcodeInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                this.addProductToCart(e.target.value);\n                e.target.value = '';\n            }\n        });\n\n        // Manual add button\n        document.getElementById('manualAddBtn').addEventListener('click', () => {\n            this.showProductModal('add');\n        });\n\n        // Payment methods\n        document.querySelectorAll('.payment-btn').forEach(btn => {\n            btn.addEventListener('click', () => this.selectPaymentMethod(btn.dataset.method));\n        });\n\n        // Cart actions\n        document.getElementById('clearCartBtn').addEventListener('click', () => this.clearCart());\n        document.getElementById('processPaymentBtn').addEventListener('click', () => this.processPayment());\n\n        // Product management\n        document.getElementById('addProductBtn').addEventListener('click', () => this.showProductModal('add'));\n        document.getElementById('productSearch').addEventListener('input', (e) => this.filterProducts(e.target.value));\n        document.getElementById('categoryFilter').addEventListener('change', (e) => this.filterProducts('', e.target.value));\n\n        // Modal events\n        document.querySelectorAll('.close').forEach(close => {\n            close.addEventListener('click', () => this.closeModals());\n        });\n\n        document.getElementById('productForm').addEventListener('submit', (e) => this.saveProduct(e));\n        document.getElementById('cancelBtn').addEventListener('click', () => this.closeModals());\n\n        // Receipt actions\n        document.getElementById('printReceiptBtn').addEventListener('click', () => this.printReceipt());\n        document.getElementById('emailReceiptBtn').addEventListener('click', () => this.emailReceipt());\n\n        // Date filter for receipts\n        document.getElementById('dateFilter').addEventListener('change', (e) => this.filterReceipts(e.target.value));\n    }\n\n    loadSampleData() {\n        // Sample products\n        const sampleProducts = [\n            { barcode: '1234567890123', name: 'Rice 1kg', price: 80, stock_quantity: 50, category: 'Groceries', hsn_code: '1006', gst_rate: 5 },\n            { barcode: '1234567890124', name: 'Milk 1L', price: 55, stock_quantity: 30, category: 'Dairy', hsn_code: '0401', gst_rate: 5 },\n            { barcode: '1234567890125', name: 'Coca Cola 600ml', price: 40, stock_quantity: 25, category: 'Beverages', hsn_code: '2202', gst_rate: 12 },\n            { barcode: '1234567890126', name: 'Bread', price: 25, stock_quantity: 20, category: 'Groceries', hsn_code: '1905', gst_rate: 5 },\n            { barcode: '1234567890127', name: 'Shampoo 200ml', price: 120, stock_quantity: 15, category: 'Personal Care', hsn_code: '3305', gst_rate: 18 }\n        ];\n\n        sampleProducts.forEach(product => {\n            this.products.push({\n                ...product,\n                id: this.generateId(),\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n        });\n\n        this.saveToLocalStorage();\n        this.renderProducts();\n    }\n\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    switchTab(tabName) {\n        // Update tab buttons\n        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));\n        document.querySelector(\`[data-tab=\"\${tabName}\"]\`).classList.add('active');\n\n        // Update tab content\n        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));\n        document.getElementById(tabName).classList.add('active');\n\n        // Load tab-specific data\n        if (tabName === 'products') {\n            this.renderProducts();\n        } else if (tabName === 'inventory') {\n            this.renderInventory();\n        } else if (tabName === 'receipts') {\n            this.renderReceipts();\n        }\n    }\n\n    addProductToCart(barcode) {\n        const product = this.products.find(p => p.barcode === barcode);\n        if (!product) {\n            this.showAlert('Product not found', 'error');\n            return;\n        }\n\n        if (product.stock_quantity <= 0) {\n            this.showAlert('Product out of stock', 'error');\n            return;\n        }\n\n        const existingItem = this.cart.find(item => item.barcode === barcode);\n        if (existingItem) {\n            if (existingItem.quantity >= product.stock_quantity) {\n                this.showAlert('Insufficient stock', 'error');\n                return;\n            }\n            existingItem.quantity += 1;\n        } else {\n            this.cart.push({\n                ...product,\n                quantity: 1\n            });\n        }\n\n        this.renderCart();\n        this.updateCartTotal();\n    }\n\n    removeFromCart(barcode) {\n        this.cart = this.cart.filter(item => item.barcode !== barcode);\n        this.renderCart();\n        this.updateCartTotal();\n    }\n\n    updateCartItemQuantity(barcode, change) {\n        const item = this.cart.find(item => item.barcode === barcode);\n        if (item) {\n            const product = this.products.find(p => p.barcode === barcode);\n            const newQuantity = item.quantity + change;\n            \n            if (newQuantity <= 0) {\n                this.removeFromCart(barcode);\n            } else if (newQuantity <= product.stock_quantity) {\n                item.quantity = newQuantity;\n                this.renderCart();\n                this.updateCartTotal();\n            } else {\n                this.showAlert('Insufficient stock', 'error');\n            }\n        }\n    }\n\n    renderCart() {\n        const cartItems = document.getElementById('cartItems');\n        cartItems.innerHTML = '';\n\n        this.cart.forEach(item => {\n            const cartItem = document.createElement('div');\n            cartItem.className = 'cart-item';\n            cartItem.innerHTML = \`\n                <div class=\"cart-item-info\">\n                    <div class=\"cart-item-name\">\${item.name}</div>\n                    <div class=\"cart-item-price\">₹\${item.price.toFixed(2)} x \${item.quantity}</div>\n                </div>\n                <div class=\"cart-item-controls\">\n                    <button class=\"quantity-btn\" onclick=\"pos.updateCartItemQuantity('\${item.barcode}', -1)\">-</button>\n                    <span>\${item.quantity}</span>\n                    <button class=\"quantity-btn\" onclick=\"pos.updateCartItemQuantity('\${item.barcode}', 1)\">+</button>\n                    <button class=\"remove-btn\" onclick=\"pos.removeFromCart('\${item.barcode}')\">×</button>\n                </div>\n            \`;\n            cartItems.appendChild(cartItem);\n        });\n    }\n\n    updateCartTotal() {\n        let subtotal = 0;\n        let totalGST = 0;\n\n        this.cart.forEach(item => {\n            const itemTotal = item.price * item.quantity;\n            subtotal += itemTotal;\n            \n            const gstAmount = (itemTotal * item.gst_rate) / (100 + item.gst_rate);\n            totalGST += gstAmount;\n        });\n\n        const total = subtotal;\n        const subtotalWithoutGST = subtotal - totalGST;\n\n        document.getElementById('subtotal').textContent = \`₹\${subtotalWithoutGST.toFixed(2)}\`;\n        document.getElementById('gstAmount').textContent = \`₹\${totalGST.toFixed(2)}\`;\n        document.getElementById('totalAmount').textContent = \`₹\${total.toFixed(2)}\`;\n    }\n\n    selectPaymentMethod(method) {\n        this.currentPaymentMethod = method;\n        document.querySelectorAll('.payment-btn').forEach(btn => btn.classList.remove('active'));\n        document.querySelector(\`[data-method=\"\${method}\"]\`).classList.add('active');\n    }\n\n    clearCart() {\n        this.cart = [];\n        this.renderCart();\n        this.updateCartTotal();\n    }\n\n    processPayment() {\n        if (this.cart.length === 0) {\n            this.showAlert('Cart is empty', 'error');\n            return;\n        }\n\n        // Check stock availability\n        for (const item of this.cart) {\n            const product = this.products.find(p => p.barcode === item.barcode);\n            if (product.stock_quantity < item.quantity) {\n                this.showAlert(\`Insufficient stock for \${item.name}\`, 'error');\n                return;\n            }\n        }\n\n        // Create receipt\n        const receiptId = this.generateReceiptId();\n        const receipt = {\n            id: receiptId,\n            items: [...this.cart],\n            total: this.calculateCartTotal(),\n            payment_method: this.currentPaymentMethod,\n            customer_phone: document.getElementById('customerPhone').value || null,\n            timestamp: new Date().toISOString(),\n            date: new Date().toDateString()\n        };\n\n        // Update stock\n        this.cart.forEach(item => {\n            const product = this.products.find(p => p.barcode === item.barcode);\n            product.stock_quantity -= item.quantity;\n        });\n\n        // Save receipt\n        this.receipts.unshift(receipt);\n        this.saveToLocalStorage();\n\n        // Show receipt\n        this.showReceipt(receipt);\n\n        // Clear cart\n        this.clearCart();\n        document.getElementById('customerPhone').value = '';\n\n        this.showAlert('Payment processed successfully', 'success');\n    }\n\n    calculateCartTotal() {\n        let subtotal = 0;\n        let totalGST = 0;\n\n        this.cart.forEach(item => {\n            const itemTotal = item.price * item.quantity;\n            subtotal += itemTotal;\n            \n            const gstAmount = (itemTotal * item.gst_rate) / (100 + item.gst_rate);\n            totalGST += gstAmount;\n        });\n\n        return {\n            subtotal: subtotal - totalGST,\n            gst: totalGST,\n            total: subtotal\n        };\n    }\n\n    generateReceiptId() {\n        return \`RCP-\${Date.now()}-\${Math.random().toString(36).substr(2, 9).toUpperCase()}\`;\n    }\n\n    showReceipt(receipt) {\n        const receiptContent = document.getElementById('receiptContent');\n        const totals = this.calculateReceiptTotals(receipt.items);\n        \n        receiptContent.innerHTML = \`\n            <div class=\"receipt-header\">\n                <h2>InvenEase Grocery Store</h2>\n                <p>123 Main Street, City, State - 123456</p>\n                <p>Phone: +91 9999999999</p>\n                <p>GSTIN: 27AAAAA0000A1Z5</p>\n                <hr>\n                <p>Receipt: \${receipt.id}</p>\n                <p>Date: \${new Date(receipt.timestamp).toLocaleString('en-IN')}</p>\n                <p>Payment: \${receipt.payment_method}</p>\n                \${receipt.customer_phone ? \`<p>Phone: \${receipt.customer_phone}</p>\` : ''}\n            </div>\n            \n            <div class=\"receipt-items\">\n                <table style=\"width: 100%; font-size: 12px;\">\n                    <thead>\n                        <tr>\n                            <th>Item</th>\n                            <th>Qty</th>\n                            <th>Rate</th>\n                            <th>GST%</th>\n                            <th>Amount</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        \${receipt.items.map(item => \`\n                            <tr>\n                                <td>\${item.name}</td>\n                                <td>\${item.quantity}</td>\n                                <td>₹\${item.price.toFixed(2)}</td>\n                                <td>\${item.gst_rate}%</td>\n                                <td>₹\${(item.price * item.quantity).toFixed(2)}</td>\n                            </tr>\n                        \`).join('')}\n                    </tbody>\n                </table>\n            </div>\n            \n            <div class=\"receipt-total\">\n                <table style=\"width: 100%; font-size: 12px;\">\n                    <tr>\n                        <td>Subtotal:</td>\n                        <td style=\"text-align: right;\">₹\${totals.subtotal.toFixed(2)}</td>\n                    </tr>\n                    <tr>\n                        <td>GST:</td>\n                        <td style=\"text-align: right;\">₹\${totals.gst.toFixed(2)}</td>\n                    </tr>\n                    <tr style=\"font-weight: bold; font-size: 14px;\">\n                        <td>Total:</td>\n                        <td style=\"text-align: right;\">₹\${totals.total.toFixed(2)}</td>\n                    </tr>\n                </table>\n                <hr>\n                <p style=\"text-align: center; margin-top: 10px;\">Thank you for shopping with us!</p>\n                <p style=\"text-align: center; font-size: 10px;\">Return within 7 days with receipt</p>\n            </div>\n        \`;\n        \n        document.getElementById('receiptModal').style.display = 'block';\n    }\n\n    calculateReceiptTotals(items) {\n        let subtotal = 0;\n        let totalGST = 0;\n\n        items.forEach(item => {\n            const itemTotal = item.price * item.quantity;\n            subtotal += itemTotal;\n            \n            const gstAmount = (itemTotal * item.gst_rate) / (100 + item.gst_rate);\n            totalGST += gstAmount;\n        });\n\n        return {\n            subtotal: subtotal - totalGST,\n            gst: totalGST,\n            total: subtotal\n        };\n    }\n\n    printReceipt() {\n        window.print();\n    }\n\n    emailReceipt() {\n        this.showAlert('Email functionality would be implemented with backend service', 'warning');\n    }\n\n    showProductModal(mode, product = null) {\n        const modal = document.getElementById('productModal');\n        const form = document.getElementById('productForm');\n        const title = document.getElementById('modalTitle');\n        \n        title.textContent = mode === 'edit' ? 'Edit Product' : 'Add Product';\n        \n        if (mode === 'edit' && product) {\n            form.name.value = product.name;\n            form.barcode.value = product.barcode;\n            form.price.value = product.price;\n            form.stock_quantity.value = product.stock_quantity;\n            form.category.value = product.category;\n            form.hsn_code.value = product.hsn_code || '';\n            form.gst_rate.value = product.gst_rate;\n            form.dataset.mode = 'edit';\n            form.dataset.productId = product.id;\n        } else {\n            form.reset();\n            form.dataset.mode = 'add';\n            delete form.dataset.productId;\n        }\n        \n        modal.style.display = 'block';\n    }\n\n    saveProduct(e) {\n        e.preventDefault();\n        const form = e.target;\n        const formData = new FormData(form);\n        const mode = form.dataset.mode;\n        \n        const productData = {\n            name: formData.get('name'),\n            barcode: formData.get('barcode'),\n            price: parseFloat(formData.get('price')),\n            stock_quantity: parseInt(formData.get('stock_quantity')),\n            category: formData.get('category'),\n            hsn_code: formData.get('hsn_code'),\n            gst_rate: parseInt(formData.get('gst_rate'))\n        };\n\n        if (mode === 'edit') {\n            const productId = form.dataset.productId;\n            const productIndex = this.products.findIndex(p => p.id === productId);\n            if (productIndex !== -1) {\n                this.products[productIndex] = {\n                    ...this.products[productIndex],\n                    ...productData,\n                    updated_at: new Date().toISOString()\n                };\n            }\n        } else {\n            // Check if barcode already exists\n            if (this.products.some(p => p.barcode === productData.barcode)) {\n                this.showAlert('Barcode already exists', 'error');\n                return;\n            }\n\n            this.products.push({\n                ...productData,\n                id: this.generateId(),\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n        }\n\n        this.saveToLocalStorage();\n        this.renderProducts();\n        this.closeModals();\n        this.showAlert(\`Product \${mode === 'edit' ? 'updated' : 'added'} successfully\`, 'success');\n    }\n\n    deleteProduct(productId) {\n        if (confirm('Are you sure you want to delete this product?')) {\n            this.products = this.products.filter(p => p.id !== productId);\n            this.saveToLocalStorage();\n            this.renderProducts();\n            this.showAlert('Product deleted successfully', 'success');\n        }\n    }\n\n    renderProducts() {\n        const tableContainer = document.getElementById('productsTable');\n        \n        if (this.products.length === 0) {\n            tableContainer.innerHTML = '<p>No products found. Add your first product!</p>';\n            return;\n        }\n\n        const table = \`\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Barcode</th>\n                        <th>Price</th>\n                        <th>Stock</th>\n                        <th>Category</th>\n                        <th>GST%</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \${this.products.map(product => \`\n                        <tr>\n                            <td>\${product.name}</td>\n                            <td>\${product.barcode}</td>\n                            <td>₹\${product.price.toFixed(2)}</td>\n                            <td>\${product.stock_quantity}</td>\n                            <td>\${product.category}</td>\n                            <td>\${product.gst_rate}%</td>\n                            <td>\n                                <button class=\"btn btn-primary\" onclick=\"pos.showProductModal('edit', pos.products.find(p => p.id === '\${product.id}'))\">Edit</button>\n                                <button class=\"btn btn-secondary\" onclick=\"pos.deleteProduct('\${product.id}')\">Delete</button>\n                            </td>\n                        </tr>\n                    \`).join('')}\n                </tbody>\n            </table>\n        \`;\n        \n        tableContainer.innerHTML = table;\n    }\n\n    renderInventory() {\n        const tableContainer = document.getElementById('inventoryTable');\n        \n        const lowStockProducts = this.products.filter(p => p.stock_quantity <= 10);\n        \n        const table = \`\n            <div style=\"margin-bottom: 1rem;\">\n                <h3 style=\"color: #dc3545;\">Low Stock Alert</h3>\n                <p>\${lowStockProducts.length} products need attention</p>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Product</th>\n                        <th>Current Stock</th>\n                        <th>Status</th>\n                        <th>Last Updated</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \${this.products.map(product => \`\n                        <tr style=\"\${product.stock_quantity <= 10 ? 'background-color: #fff3cd;' : ''}\">\n                            <td>\${product.name}</td>\n                            <td>\${product.stock_quantity}</td>\n                            <td>\n                                \${product.stock_quantity === 0 ? '<span style=\"color: #dc3545;\">Out of Stock</span>' : \n                                  product.stock_quantity <= 10 ? '<span style=\"color: #856404;\">Low Stock</span>' : \n                                  '<span style=\"color: #28a745;\">In Stock</span>'}\n                            </td>\n                            <td>\${new Date(product.updated_at).toLocaleDateString()}</td>\n                            <td>\n                                <button class=\"btn btn-primary\" onclick=\"pos.updateStock('\${product.id}')\">Update Stock</button>\n                            </td>\n                        </tr>\n                    \`).join('')}\n                </tbody>\n            </table>\n        \`;\n        \n        tableContainer.innerHTML = table;\n    }\n\n    updateStock(productId) {\n        const product = this.products.find(p => p.id === productId);\n        const newStock = prompt(\`Update stock for \${product.name}\`, product.stock_quantity);\n        \n        if (newStock !== null && !isNaN(newStock)) {\n            product.stock_quantity = parseInt(newStock);\n            product.updated_at = new Date().toISOString();\n            this.saveToLocalStorage();\n            this.renderInventory();\n            this.showAlert('Stock updated successfully', 'success');\n        }\n    }\n\n    renderReceipts() {\n        const tableContainer = document.getElementById('receiptsTable');\n        \n        if (this.receipts.length === 0) {\n            tableContainer.innerHTML = '<p>No sales records found.</p>';\n            return;\n        }\n\n        const table = \`\n            <table>\n                <thead>\n                    <tr>\n                        <th>Receipt ID</th>\n                        <th>Date</th>\n                        <th>Items</th>\n                        <th>Total</th>\n                        <th>Payment</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \${this.receipts.map(receipt => {\n                        const totals = this.calculateReceiptTotals(receipt.items);\n                        return \`\n                            <tr>\n                                <td>\${receipt.id}</td>\n                                <td>\${new Date(receipt.timestamp).toLocaleDateString()}</td>\n                                <td>\${receipt.items.length}</td>\n                                <td>₹\${totals.total.toFixed(2)}</td>\n                                <td>\${receipt.payment_method}</td>\n                                <td>\n                                    <button class=\"btn btn-primary\" onclick=\"pos.showReceipt(pos.receipts.find(r => r.id === '\${receipt.id}'))\">View</button>\n                                </td>\n                            </tr>\n                        \`;\n                    }).join('')}\n                </tbody>\n            </table>\n        \`;\n        \n        tableContainer.innerHTML = table;\n    }\n\n    filterProducts(searchTerm, category = '') {\n        const filtered = this.products.filter(product => {\n            const matchesSearch = !searchTerm || \n                product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                product.barcode.includes(searchTerm);\n            const matchesCategory = !category || product.category === category;\n            return matchesSearch && matchesCategory;\n        });\n\n        // Temporarily store original products and render filtered\n        const originalProducts = this.products;\n        this.products = filtered;\n        this.renderProducts();\n        this.products = originalProducts;\n    }\n\n    filterReceipts(date) {\n        const filtered = date ? \n            this.receipts.filter(receipt => receipt.date === new Date(date).toDateString()) :\n            this.receipts;\n\n        // Temporarily store original receipts and render filtered\n        const originalReceipts = this.receipts;\n        this.receipts = filtered;\n        this.renderReceipts();\n        this.receipts = originalReceipts;\n    }\n\n    closeModals() {\n        document.querySelectorAll('.modal').forEach(modal => {\n            modal.style.display = 'none';\n        });\n    }\n\n    showAlert(message, type = 'info') {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = \`alert alert-\${type}\`;\n        alertDiv.textContent = message;\n        \n        document.body.insertBefore(alertDiv, document.body.firstChild);\n        \n        setTimeout(() => {\n            alertDiv.remove();\n        }, 3000);\n    }\n\n    loadProducts() {\n        const stored = localStorage.getItem('grocery_pos_products');\n        if (stored) {\n            this.products = JSON.parse(stored);\n        }\n    }\n\n    loadReceipts() {\n        const stored = localStorage.getItem('grocery_pos_receipts');\n        if (stored) {\n            this.receipts = JSON.parse(stored);\n        }\n    }\n\n    saveToLocalStorage() {\n        localStorage.setItem('grocery_pos_products', JSON.stringify(this.products));\n        localStorage.setItem('grocery_pos_receipts', JSON.stringify(this.receipts));\n    }\n}\n\n// Initialize the POS system\nconst pos = new GroceryPOS();\n\n// Close modals when clicking outside\nwindow.onclick = function(event) {\n    const modals = document.querySelectorAll('.modal');\n    modals.forEach(modal => {\n        if (event.target === modal) {\n            modal.style.display = 'none';\n        }\n    });\n};"